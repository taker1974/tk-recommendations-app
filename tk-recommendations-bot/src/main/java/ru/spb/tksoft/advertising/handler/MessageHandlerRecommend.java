package ru.spb.tksoft.advertising.handler;

import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;
import java.util.stream.IntStream;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import jakarta.annotation.PostConstruct;
import ru.spb.tksoft.advertising.service.UserRecommendationServiceCached;
import ru.spb.tksoft.advertising.tools.StringEx;
import ru.spb.tksoft.recommendations.dto.user.HistoryUserDto;
import ru.spb.tksoft.recommendations.dto.user.UserRecommendationsDto;
import ru.spb.tksoft.recommendations.dto.user.UserRecommendedProductDto;

/**
 * Handle command /recommend
 */
@Component
public class MessageHandlerRecommend extends MessageHandler {

    final Logger log = LoggerFactory.getLogger(MessageHandlerRecommend.class);

    private final UserRecommendationServiceCached userRecommendationServiceCached;

    public MessageHandlerRecommend(
            @Autowired UserRecommendationServiceCached userRecommendationServiceCached) {

        super(List.of("/recommend", "recommend", "/r"));
        this.userRecommendationServiceCached = userRecommendationServiceCached;
    }

    @PostConstruct
    private void postConstruct() {
        // ...
    }

    @Override
    public String getHelp() {
        return "/recommend <UUID> –∏–ª–∏ /r <UUID> - —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º UUID";
    }

    @Override
    public String handle(final long chatId, final int messageId, final String rawMessage) {

        Optional<String> checkResponse = checkMessageTooLong(rawMessage);
        if (checkResponse.isPresent()) {
            return checkResponse.get();
        }

        final String messageTrimmed = removeCommand(StringEx.removeAdjacentSpaces(rawMessage));
        checkResponse = checkMessageTooShort(messageTrimmed);
        if (checkResponse.isPresent()) {
            return checkResponse.get();
        }

        Optional<HistoryUserDto> userInfoOptional = userRecommendationServiceCached
                .getUserInfo(UUID.fromString(messageTrimmed));
        if (userInfoOptional.isEmpty()) {
            return "ü§î –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ú–æ–∂–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é ‚ùì";
        }
        final HistoryUserDto userInfo = userInfoOptional.get();

        Optional<UserRecommendationsDto> recommendationsOptional = userRecommendationServiceCached
                .getRecommendations(UUID.fromString(messageTrimmed));
        if (recommendationsOptional.isEmpty()) {
            return "ü§î –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –≠—Ç–æ —Ç–æ—á–Ω–æ –æ—à–∏–±–∫–∞‚ùóÔ∏è";
        }
        final UserRecommendationsDto recommendations = recommendationsOptional.get();

        String name = userInfo.getFirstName();
        if (name == null || name.isBlank()) {
            name = userInfo.getUserName();
        }

        var sb = new StringBuilder("üòç " + name + ", –¥–æ—Ä–æ–≥–æ–π –Ω–∞—à —á–µ–ª–æ–≤–µ—á–µ–∫!\n");

        Set<UserRecommendedProductDto> list = recommendations.getRecommendations();
        if (list.isEmpty()) {
            sb.append(
                    "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å–ª–æ–º–∞–ª–∏ —Å–∏—Å—Ç–µ–º—É - –º—ã –Ω–µ –Ω–∞—à–ª–∏ –¥–ª—è –≤–∞—Å –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ üëè");
        } else {
            sb.append("üîé –ú—ã —Ö–æ—Ä–æ—à–æ –ø–æ–∏—Å–∫–∞–ª–∏ –∏ –Ω–∞—à–ª–∏ –¥–ª—è –≤–∞—Å –≤–æ—Ç —Ç–∞–∫–∏–µ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n");
            Iterator<Integer> iterator = IntStream.range(0, list.size()).iterator();
            list.forEach(product -> sb.append(
                    (iterator.next() + 1) + ") " +
                            product.getProductName() + "\n")); // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞
                                                               // –ø—Ä–æ–¥—É–∫—Ç—ã —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º.
            sb.append(
                    "–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–∞–º üëÜ, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∞–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤! –ñ–¥—ë–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ üëã");
        }

        return sb.toString();
    }
}
